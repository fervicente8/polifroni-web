---
import ImgExtDoorPhone from "../assets/images/ext-door-phone.png";
import ImgGatePhone from "../assets/images/gate-phone.png";
import ImgIntDoorPhone from "../assets/images/int-door-phone.png";
import ImgWindowPhone from "../assets/images/window-phone.png";
let imagesPhone = [
  ImgExtDoorPhone.src,
  ImgGatePhone.src,
  ImgIntDoorPhone.src,
  ImgWindowPhone.src,
];
import ImgExtDoorDesktop from "../assets/images/ext-door-desktop.png";
import ImgGateDesktop from "../assets/images/gate-desktop.png";
import ImgIntDoorDesktop from "../assets/images/int-door-desktop.png";
import ImgWindowDesktop from "../assets/images/window-desktop.png";
let imagesdesktop = [
  ImgExtDoorDesktop.src,
  ImgGateDesktop.src,
  ImgIntDoorDesktop.src,
  ImgWindowDesktop.src,
];
---

<script>
  let currentIndex = 0;
  let screenWidth = window.innerWidth;
  const phoneImagesData = JSON.parse(
    document.getElementById("phone-images-data").getAttribute("data-images")
  );
  const desktopImagesData = JSON.parse(
    document.getElementById("desktop-images-data").getAttribute("data-images")
  );
  let renderedImages = screenWidth <= 768 ? phoneImagesData : desktopImagesData;

  function showImages() {
    const imageContainer = document.querySelector(".image-container");
    let prevImg = document.getElementById("prevImg") as HTMLImageElement | null;
    let mainImg = document.getElementById("mainImg") as HTMLImageElement | null;
    let nextImg = document.getElementById("nextImg") as HTMLImageElement | null;

    function createButton(
      buttonTitle: string,
      redirect: string,
      subtitle: string,
      text: string
    ) {
      let mediaQuery = window.matchMedia("(min-width: 1024px)");
      const buttonContainer = document.createElement("div");
      buttonContainer.style.position = "absolute";
      buttonContainer.style.bottom = "1rem";
      buttonContainer.style.left = "1rem";
      buttonContainer.style.zIndex = "3";
      buttonContainer.classList.add("animate-fade-in-up");
      const button = document.createElement("a");
      button.innerText = buttonTitle;
      button.href = redirect;
      button.style.color = "rgba(255, 255, 255, 0.85)";
      button.style.border = "1px solid #862e44";
      button.style.fontSize = "1.1rem";
      button.style.fontWeight = "bold";
      button.style.padding = "0.5rem 1rem";
      button.style.borderRadius = "3px";
      button.style.transition = "all 0.3s ease-in-out";
      button.style.backgroundColor = "rgba(0, 0, 0, 0.2)";
      button.addEventListener("mouseover", () => {
        button.style.backgroundColor = "rgba(255, 255, 255, 0.7)";
        button.style.color = "#862e44";
      });
      button.addEventListener("mouseout", () => {
        button.style.backgroundColor = "rgba(0, 0, 0, 0.2)";
        button.style.color = "rgba(255, 255, 255, 0.85)";
      });
      const buttonSubtitle = document.createElement("h3");
      buttonSubtitle.innerText = subtitle;
      buttonSubtitle.style.margin = "10px 0 0px";
      buttonSubtitle.style.color = "#f5f5f7";
      buttonSubtitle.style.fontSize = "1.1rem";
      buttonSubtitle.style.textShadow = "1px 1px 2px rgba(0, 0, 0, 1)";
      const buttonText = document.createElement("p");
      buttonText.innerText = text;
      buttonText.style.color = "#f5f5f7";
      buttonText.style.fontSize = "0.9rem";
      buttonText.style.textShadow = "1px 1px 2px rgba(0, 0, 0, 0.5)";
      buttonContainer.appendChild(button);
      buttonContainer.appendChild(buttonSubtitle);
      buttonContainer.appendChild(buttonText);
      if (mediaQuery.matches) {
        button.style.fontSize = "1.3rem";
        buttonSubtitle.style.fontSize = "1.2rem";
        buttonText.style.fontSize = "1rem";
      }
      return buttonContainer;
    }

    prevImg.src =
      renderedImages[
        (currentIndex - 1 + renderedImages.length) % renderedImages.length
      ];
    mainImg.src = renderedImages[currentIndex];
    if (currentIndex === 0) {
      imageContainer.removeChild(imageContainer.lastChild);
      let button = createButton(
        "Descubrir",
        "/productos/puertas-exterior",
        "Puertas que abren caminos",
        "Descubre puertas diseñadas para conectar espacios y estilos."
      );
      imageContainer.appendChild(button);
    } else if (currentIndex === 1) {
      imageContainer.removeChild(imageContainer.lastChild);
      let button = createButton(
        "Conocer",
        "/productos/portones",
        "Portones que hacen entradas memorables",
        "Explora portones robustos que ofrecen seguridad con elegancia."
      );
      imageContainer.appendChild(button);
    } else if (currentIndex === 2) {
      imageContainer.removeChild(imageContainer.lastChild);
      let button = createButton(
        "Explorar",
        "/productos/puertas-interior",
        "Puertas que reflejan estilos",
        "Adéntrate en puertas de interior que reflejan tu personalidad y decoración."
      );
      imageContainer.appendChild(button);
    } else if (currentIndex === 3) {
      imageContainer.removeChild(imageContainer.lastChild);
      let button = createButton(
        "Observar",
        "/productos/ventanas",
        "Ventanas que capturan vistas",
        "Observa ventanas luminosas que enmarcan el mundo exterior con belleza."
      );
      imageContainer.appendChild(button);
    }
    nextImg.src = renderedImages[(currentIndex + 1) % renderedImages.length];

    updateIndicators();
  }

  function updateIndicators() {
    const indicators = document.querySelectorAll(".indicator");
    indicators.forEach((indicator, index) => {
      if (index === currentIndex) {
        indicator.classList.add("active");
      } else {
        indicator.classList.remove("active");
      }
    });
  }

  function changeImage(index: number) {
    currentIndex = index;
    showImages();
  }

  const indicators = document.querySelectorAll(".indicator");
  let imageSelected = false;
  indicators.forEach((indicator, index) => {
    indicator.addEventListener("click", () => {
      changeImage(index);
      imageSelected = true;
    });
  });

  setInterval(() => {
    if (!imageSelected) {
      currentIndex = (currentIndex + 1) % renderedImages.length;
      showImages();
    }
  }, 10000);

  showImages();

  function handleResize() {
    screenWidth = window.innerWidth;

    if (screenWidth < 768) {
      renderedImages = phoneImagesData;
    } else {
      renderedImages = desktopImagesData;
    }

    showImages();
  }

  window.addEventListener("resize", handleResize);
</script>

<section class='carousel my-14 lg:my-20'>
  <div class='image-container'>
    <img id='prevImg' class='blurry' alt='Previous' />
    <img id='mainImg' alt='Current' />
    <img id='nextImg' class='blurry' alt='Next' />
  </div>
  <div class='indicators'>
    <span class='indicator'></span>
    <span class='indicator'></span>
    <span class='indicator'></span>
    <span class='indicator'></span>
  </div>
</section>

<div
  id='phone-images-data'
  class='hidden'
  data-images={JSON.stringify(imagesPhone)}
>
</div>
<div
  id='desktop-images-data'
  class='hidden'
  data-images={JSON.stringify(imagesdesktop)}
>
</div>

<style>
  .carousel {
    position: relative;
    width: 100%;
    overflow: hidden;
  }

  .image-container {
    position: relative;
    display: flex;
    width: 254px;
    margin: auto;
  }

  .image-container {
    transition: all 0.5s ease-in-out;
  }

  #prevImg {
    position: absolute;
    width: 100%;
    left: -100%;
    transform: translateX(-20px);
    transform: scale(0.95);
    z-index: 1;
  }

  #nextImg {
    position: absolute;
    width: 100%;
    left: 100%;
    transform: translateX(20px);
    transform: scale(0.95);
    z-index: 1;
  }

  #mainImg {
    border-radius: 1px;
    box-shadow: 0px 0px 5px 0px rgba(0, 0, 0, 0.7);
    filter: brightness(0.65);
    z-index: 2;
  }

  .blurry {
    filter: blur(2px);
    opacity: 0.8;
    z-index: 1;
  }

  .indicators {
    display: flex;
    gap: 10px;
    justify-content: center;
    margin-top: 20px;
  }

  .indicator {
    width: 10px;
    height: 10px;
    background-color: #ccc;
    border-radius: 50%;
    cursor: pointer;
  }

  .indicator.active {
    background-color: #333;
  }

  .slide-left {
    animation: slideLeft 1s forwards;
  }

  @keyframes slideLeft {
    from {
      transform: translateX(0);
    }
    to {
      transform: translateX(-100%);
    }
  }

  @media screen and (min-width: 639px) {
    .image-container {
      width: 300px;
      height: 445px;
    }
  }

  @media screen and (min-width: 768px) {
    .image-container {
      width: 689px;
      height: auto;
    }
  }

  @media screen and (min-width: 1024px) {
    .image-container {
      width: 980px;
    }

    .carousel-button-container h3 {
      font-size: 1.5rem;
    }
  }

  @media screen and (min-width: 1440px) {
    .image-container {
      width: 1200px;
      object-fit: cover;
    }
  }
</style>
